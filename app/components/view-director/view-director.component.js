"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var page_1 = require("ui/page");
var router_1 = require("@angular/router");
var start_service_1 = require("./../../services/start/start.service");
var plugin = require("nativescript-uuid");
var appSettings = require("application-settings");
var ViewDirectorComponent = /** @class */ (function () {
    function ViewDirectorComponent(page, router, _Activatedroute, StartService) {
        this.page = page;
        this.router = router;
        this._Activatedroute = _Activatedroute;
        this.StartService = StartService;
        page.actionBarHidden = true;
        this.page = page;
    }
    ViewDirectorComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.uuid = this._Activatedroute.snapshot.params['id'];
        this.id = this._Activatedroute.snapshot.params['id2'];
        this.directors = appSettings.getString("directors", "");
        var directorsObj;
        this.StartService.refreshStatus(this.uuid).subscribe(function (response) {
            _this.directors = response['incorporation'][0].directors;
            _this.directorsArr = JSON.parse(_this.directors);
            _this.firstName = _this.directorsArr[_this.id].firstName;
            _this.lastName = _this.directorsArr[_this.id].lastName;
            _this.email = _this.directorsArr[_this.id].email;
            _this.al1 = _this.directorsArr[_this.id].al1;
            _this.al2 = _this.directorsArr[_this.id].al2;
            _this.city = _this.directorsArr[_this.id].city;
            _this.postal = _this.directorsArr[_this.id].postal;
            _this.country = _this.directorsArr[_this.id].country;
            _this.state = _this.directorsArr[_this.id].state;
        }, function (error) { return console.log(error); });
    };
    ViewDirectorComponent = __decorate([
        core_1.Component({
            selector: "ViewDirector",
            moduleId: module.id,
            templateUrl: "./view-director.component.html"
        }),
        __metadata("design:paramtypes", [page_1.Page, router_1.Router, router_1.ActivatedRoute, start_service_1.StartService])
    ], ViewDirectorComponent);
    return ViewDirectorComponent;
}());
exports.ViewDirectorComponent = ViewDirectorComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlldy1kaXJlY3Rvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ2aWV3LWRpcmVjdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUF3RTtBQUN4RSxnQ0FBK0I7QUFDL0IsMENBQXlEO0FBQ3pELHNFQUFtRTtBQUVuRSxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsbUJBQW1CLENBQUMsQ0FBQztBQUM1QyxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQU9sRDtJQWtCSSwrQkFBb0IsSUFBVSxFQUFVLE1BQWMsRUFBVSxlQUE4QixFQUFVLFlBQTBCO1FBQTlHLFNBQUksR0FBSixJQUFJLENBQU07UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsb0JBQWUsR0FBZixlQUFlLENBQWU7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztRQUNwSSxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUM1QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNmLENBQUM7SUFFRCx3Q0FBUSxHQUFSO1FBQUEsaUJBcUJGO1FBcEJBLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxTQUFTLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDeEQsSUFBSSxZQUFZLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLFNBQVMsQ0FDbkQsVUFBQSxRQUFRO1lBQ1AsS0FBSSxDQUFDLFNBQVMsR0FBRyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO1lBQ3hELEtBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0MsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDdEQsS0FBSSxDQUFDLFFBQVEsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUM7WUFDcEQsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDOUMsS0FBSSxDQUFDLEdBQUcsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDMUMsS0FBSSxDQUFDLEdBQUcsR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUM7WUFDMUMsS0FBSSxDQUFDLElBQUksR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUM7WUFDNUMsS0FBSSxDQUFDLE1BQU0sR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUM7WUFDaEQsS0FBSSxDQUFDLE9BQU8sR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUM7WUFDbEQsS0FBSSxDQUFDLEtBQUssR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLEtBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDL0MsQ0FBQyxFQUNELFVBQUEsS0FBSyxJQUFJLE9BQUEsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBbEIsQ0FBa0IsQ0FDM0IsQ0FBQztJQUNILENBQUM7SUE1Q1cscUJBQXFCO1FBTGpDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsY0FBYztZQUN4QixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLGdDQUFnQztTQUNoRCxDQUFDO3lDQW1CNEIsV0FBSSxFQUFrQixlQUFNLEVBQTBCLHVCQUFjLEVBQXdCLDRCQUFZO09BbEJ6SCxxQkFBcUIsQ0E4Q2pDO0lBQUQsNEJBQUM7Q0FBQSxBQTlDRCxJQThDQztBQTlDWSxzREFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCxWaWV3Q2hpbGQsIEVsZW1lbnRSZWYgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBQYWdlIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IFN0YXJ0U2VydmljZSB9IGZyb20gJy4vLi4vLi4vc2VydmljZXMvc3RhcnQvc3RhcnQuc2VydmljZSdcclxuXHJcbmNvbnN0IHBsdWdpbiA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdXVpZFwiKTtcclxudmFyIGFwcFNldHRpbmdzID0gcmVxdWlyZShcImFwcGxpY2F0aW9uLXNldHRpbmdzXCIpO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogXCJWaWV3RGlyZWN0b3JcIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL3ZpZXctZGlyZWN0b3IuY29tcG9uZW50Lmh0bWxcIlxyXG59KVxyXG5leHBvcnQgY2xhc3MgVmlld0RpcmVjdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcblx0dXVpZCA6c3RyaW5nO1xyXG5cdGlkIDpudW1iZXJcclxuXHRmaXJzdE5hbWUgOnN0cmluZztcclxuXHRsYXN0TmFtZSA6c3RyaW5nO1xyXG5cdGVtYWlsIDpzdHJpbmc7XHJcblx0YWwxIDpzdHJpbmc7XHJcblx0YWwyIDpzdHJpbmc7XHJcblx0Y2l0eSA6c3RyaW5nO1xyXG5cdHBvc3RhbCA6c3RyaW5nO1xyXG5cdGNvdW50cnkgOnN0cmluZztcclxuXHRzdGF0ZSA6c3RyaW5nO1xyXG5cdGNvbXBhbnlOYW1lOiBzdHJpbmc7XHJcblx0Y29tcGFueVR5cGUgOnN0cmluZztcclxuXHRkaXJlY3RvcnMgOmFueTtcclxuXHRkaXJlY3RvcnNBcnIgOkFycmF5PGFueT47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwYWdlOiBQYWdlLCBwcml2YXRlIHJvdXRlcjogUm91dGVyLCBwcml2YXRlIF9BY3RpdmF0ZWRyb3V0ZTpBY3RpdmF0ZWRSb3V0ZSwgcHJpdmF0ZSBTdGFydFNlcnZpY2U6IFN0YXJ0U2VydmljZSkge1xyXG5cdFx0cGFnZS5hY3Rpb25CYXJIaWRkZW4gPSB0cnVlO1xyXG5cdFx0dGhpcy5wYWdlID0gcGFnZTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuXHRcdHRoaXMudXVpZCA9IHRoaXMuX0FjdGl2YXRlZHJvdXRlLnNuYXBzaG90LnBhcmFtc1snaWQnXTtcclxuXHRcdHRoaXMuaWQgPSB0aGlzLl9BY3RpdmF0ZWRyb3V0ZS5zbmFwc2hvdC5wYXJhbXNbJ2lkMiddO1xyXG5cdFx0dGhpcy5kaXJlY3RvcnMgPSBhcHBTZXR0aW5ncy5nZXRTdHJpbmcoXCJkaXJlY3RvcnNcIiwgXCJcIik7XHJcblx0XHRsZXQgZGlyZWN0b3JzT2JqO1xyXG5cdFx0dGhpcy5TdGFydFNlcnZpY2UucmVmcmVzaFN0YXR1cyh0aGlzLnV1aWQpLnN1YnNjcmliZShcclxuXHRcdFx0cmVzcG9uc2UgPT4ge1xyXG5cdFx0XHRcdHRoaXMuZGlyZWN0b3JzID0gcmVzcG9uc2VbJ2luY29ycG9yYXRpb24nXVswXS5kaXJlY3RvcnM7XHJcblx0XHRcdFx0dGhpcy5kaXJlY3RvcnNBcnIgPSBKU09OLnBhcnNlKHRoaXMuZGlyZWN0b3JzKTtcclxuXHRcdFx0XHR0aGlzLmZpcnN0TmFtZSA9IHRoaXMuZGlyZWN0b3JzQXJyW3RoaXMuaWRdLmZpcnN0TmFtZTtcclxuXHRcdFx0XHR0aGlzLmxhc3ROYW1lID0gdGhpcy5kaXJlY3RvcnNBcnJbdGhpcy5pZF0ubGFzdE5hbWU7XHJcblx0XHRcdFx0dGhpcy5lbWFpbCA9IHRoaXMuZGlyZWN0b3JzQXJyW3RoaXMuaWRdLmVtYWlsO1xyXG5cdFx0XHRcdHRoaXMuYWwxID0gdGhpcy5kaXJlY3RvcnNBcnJbdGhpcy5pZF0uYWwxO1xyXG5cdFx0XHRcdHRoaXMuYWwyID0gdGhpcy5kaXJlY3RvcnNBcnJbdGhpcy5pZF0uYWwyO1xyXG5cdFx0XHRcdHRoaXMuY2l0eSA9IHRoaXMuZGlyZWN0b3JzQXJyW3RoaXMuaWRdLmNpdHk7XHJcblx0XHRcdFx0dGhpcy5wb3N0YWwgPSB0aGlzLmRpcmVjdG9yc0Fyclt0aGlzLmlkXS5wb3N0YWw7XHJcblx0XHRcdFx0dGhpcy5jb3VudHJ5ID0gdGhpcy5kaXJlY3RvcnNBcnJbdGhpcy5pZF0uY291bnRyeTtcclxuXHRcdFx0XHR0aGlzLnN0YXRlID0gdGhpcy5kaXJlY3RvcnNBcnJbdGhpcy5pZF0uc3RhdGU7XHJcblx0XHRcdH0sXHJcblx0XHRcdGVycm9yID0+IGNvbnNvbGUubG9nKGVycm9yKVxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG59XHJcbiJdfQ==